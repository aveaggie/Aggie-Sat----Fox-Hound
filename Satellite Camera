#include "serial_port.cpp"
#include <iostream>


void cam_serial()
{
  serial_port rw_CAM;
	
}

/*lass camera_time
{	
	public: 
	
	int year;
	int month;
	int day;
	int hour;
	int min;
	int sec;
		
	void get_time();
};

void camera_time::get_time()
{

	time_t t = time(0);
	struct tm * now = localtime( & t);
	
	 year = ((now->tm_year +1900))-2000;
	 month = (now->tm_mon +1);
	 day = (now->tm_mday);
	 hour = (now->tm_hour);
	 min = (now->tm_min);
	 sec = (now->tm_sec);

}*/


/*struct get_time
{

	time_t t = time(0);
	struct tm * now = localtime( & t);
	
	 int year = ((now->tm_year +1900))-2000;
	 int month = (now->tm_mon +1);
	 int day = (now->tm_mday);
	 int hour = (now->tm_hour);
	 int min = (now->tm_min);
	 int sec = (now->tm_sec);
};*/

void reset_cam()
{	
	serial_port rw_CAM;
	char *CAM_port= (char*)"/dev/ttyVS24";
	const int RW_Baud = 115200;
	rw_CAM = serial_port(CAM_port);
	rw_CAM.open_port();
	rw_CAM.setup(RW_Baud);
	char size_byte = 1;
	
	rw_CAM.send(&size_byte, 1); //Sends number of bytes to be sent to camera
	rw_CAM.send(&size_byte, 1); //Sends Command # to camera. (This case  cmd #1)
	char* confirmation = rw_CAM.receive(1); //Recieve completion sequence from camera.
	
	
	cout <<confirmation<< "\n";
		
}

void capture_images()
{

	serial_port rw_CAM;
	char *CAM_port= (char*)"/dev/ttyVS24";
	const int RW_Baud = 115200;
	rw_CAM = serial_port(CAM_port);
	rw_CAM.open_port();
	rw_CAM.setup(RW_Baud);
	
	char size_byte = 15;
	char command_num = 2;
	//char send_year = ;
	
	rw_CAM.send(&size_byte, 1); //Sends number of bytes to be sent to camera
	rw_CAM.send(&command_num, 1); //Sends Command # to camera. (This case  cmd #1)
	rw_CAM.send(camera_year, 1);
	char* confirmation = rw_CAM.receive(1); //Recieve completion sequence from camera.
	
	
	cout <<confirmation<< "\n";

}

int main()
{	
	
	time_t t = time(0);
	struct tm * now = localtime( & t);
	
	 int year = ((now->tm_year +1900))-2000;
	 int month = (now->tm_mon +1);
	 int day = (now->tm_mday);
	 int hour = (now->tm_hour);
	 int min = (now->tm_min);
	 int sec = (now->tm_sec);
};
}
